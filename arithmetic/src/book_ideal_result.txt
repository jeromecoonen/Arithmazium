#INCLUDE para_head book_operations.html aaaarithmetic_toc.html book_coercion.html


<h1>The ideal intermediate result</h1>

<p>
Floating point operations follow a two-step process
that is remarkably simple, in principle:
</p>

<nl>
  <li>
    Compute an <em>ideal</em> intermediate result,
    as if with unbounded range and precision.
  </li>
  <li>
    Coerce the intermediate result to fit within
    the range and precision of the destination.
  </li>
</nl>

<p>
The process seems perfectly logical. Naturally, it's
the fast, economical execution that poses challenges.
</p>

<p>
Of course,
we don't really need <em>unbounded</em> precison in
the intermediate result. We need just enough
to provide a normalized (if possible), correctly-rounded
result.
</p>

<h2>An ideal intermediate</h2>
<p>
This diagram captures what is needed to produce
a correctly rounded result.
</p>

<pre><med-code>  +---+---------------------+-------+
  | C | b &bull; b b b b . . . b | G R S |
  +---+---------------------+------ +
</med-code></pre>

<p>
Reading from left to right,
the leading <em>Carry</em> bit catches a carry-out
that might, for example,
arise in magnitude addition of normalized
values.
</p>

<p>
The string of <code>b</code> bits represent the number
of significant bits in the destination value. This is
also known as the <em>precision</em>. The binary point
is positioned after the leading significant bit, but
that's just a convention. The exponent, not shown,
aligns the binary point to its position in the mathematical
value.
</p>

<p>
<em>Guard</em> and <em>Round</em> are the next two 
bits beyond the rightmost <code>b</code>.
The <em>Sticky</em> bit is the logical sum of all bits
to the right or <em>Round</em>,
in the infinitely precise result.
These names came into common usage during the development
of IEEE 754.
</p>

<p>
It's <em>Sticky</em> that provides the sense of
<em>unbounded precision</em>. Just to be clear, <em>Sticky</em>
is <code>0</code> only if every bit to the right of
<em>Round</em> is <code>0</code>. If any righward bit
is <code>1</code>, then <em>Sticky</em> is <code>1</code>.
</p>

<p>
During <a class="inline" href="book_coercion.html">
Coercion</a>
of the result to the destination, we'll see
the roles these bits play.
</p>

<h2><code>add()</code> and <code>sub()</code></h2>

<p>
We look at arithmetic on bytes in the
<a class="inline" href="../numbers/aaanumbers_toc.html">
Number Hall</a>.
Floating point <code>add()</code> and <code>sub()</code> are
made complicated by the shifting required to align the
binary points, and then the realignment during coercion. 
</p>

<p>
As a first example, let's compute \( 1 + 1 \).
</p>

<pre><med-code>        1 &bull; 0 0 0 0 0 0 0
      + 1 &bull; 0 0 0 0 0 0 0
      -------------------
  +---+-------------------+-------+
  | 1 | 0 &bull; 0 0 0 0 0 0 0 | 0 0 0 |
  +---+-------------------+------ +
</med-code></pre>




#INCLUDE para_foot book_operations.html aaaarithmetic_toc.html book_coercion.html
