#INCLUDE para_head book_top.html aaaarithmetic_toc.html book_special_values.html


<h1>Numbers</h1>

<p>
Floating point numbers fall neatly into a
parallelogram.
A bullet &bull;
emphasizes the binary point in this 8-bit
number system. Each value may have positive
or negative algebraic sign.
The <code>b</code>s are bits, taking
the value <code>0</code> or <code>1</code>.
</p>

<pre><code>  |11111111           &bull;                 | largest number
  |1bbbbbbb           &bull;                 |
  | 1bbbbbbb          &bull;                 |
  |  1bbbbbbb         &bull;                 |
  |   1bbbbbbb        &bull;                 |
  
       . . . many lines omitted . . .
  
  |         1bbbbbbb00&bull;                 |
  |          1bbbbbbb0&bull;                 |
  |           1bbbbbbb&bull;                 |
  |            1bbbbbb&bull;b                |
  |             1bbbbb&bull;bb               |
  |              1bbbb&bull;bbb              |
  |               1bbb&bull;bbbb             |
  |                1bb&bull;bbbbb            |
  |                 1b&bull;bbbbbb           |
  |                  1&bull;bbbbbbb          |
  |                   &bull;1bbbbbbb         |
  |                   &bull;01bbbbbbb        |
  |                   &bull;001bbbbbbb       |
  |                   &bull;0001bbbbbbb      |
  
       . . . many lines omitted . . .
  
  |                   &bull;      1bbbbbbb   |
  |                   &bull;       1bbbbbbb  |
  |                   &bull;        1bbbbbbb |
  |                   &bull;         1bbbbbbb|
  |                   &bull;         10000000| smallest normal number
  |                   --------------------------------------------
  |                   &bull;         01111111| largest subnormal number
  |                   &bull;         01bbbbbb|
  |                   &bull;         001bbbbb|
  |                   &bull;         0001bbbb|
  |                   &bull;         00001bbb|
  |                   &bull;         000001bb|
  |                   &bull;         0000001b|
  |                   &bull;         00000001| smallest subnormal number
</code></pre>

<h2>Normal numbers</h2>

<p>
This is a <em>normalized</em> number system.
The leading bit of each number is <code>1</code>,
except perhaps for the tiniest values. 
</p>

<p>
Of course, not all numbers between the largest
and smallest are representable with just 8 bits.
For example, \( 1 + 2^{-20} \) has the
binary form:
</p>
<p class="quote">
<code>1.00000000000000000001</code>
</p>
<p>
which does not lie in the parallelogram of numbers.
</p>
<p>
Normalization ensures that if a value is repreentable,
then there is exactly one representation for it.
For example, two appears as
<code>10.000000</code> in the table, and nowhere else.
When it's time to encode numbers as bit strings
in memory,
normalization gives us a free bit. Because we know the
leading significant bit is <code>1</code>, we don't have
to store it.
</p>

<p>
We will call these <em>normal numbers</em>.
</p>

<h2>The floating point</h2>

<p>
The diagram illustrates the sense in which the binary point
<em>floats</em> left and right across 8-bit strings.
Usually, there is a limit to how far rightward the binary
point can float &ndash; a limit to how big numbers can get.
That largest representable number is called the
<em>overflow threshold</em>.
</p>

<p>
In the same way, there is a limit to how far leftward
the binary point can float &ndash; a limit to how tiny
numbers can get. The diagram shows a tiniest normalized
number. This may be called the <em>underflow threshold</em>.
</p>

<h2>Denormalization</h2>

<p>
The diagram suggests that we may squeeze out a bit more range
by allowing the leading bit to go to <code>0</code> for just
these tiniest numbers. The IEEE 754 Floating Point Standard
famously adopted such <em>denormalization</em> as a means to
mitigate the effects of underflow. The resulting values have
come to be called <em>subnormal</em>.
</p>

<h2>Not a toy</h2>

<p>
The 8-bit numbers fit conveniently in the diagram.
They're easier to talk about than 24-bit or 53-bit
numbers common in current microprocessors.
But the ideas are all the same.
The narrow values help convey the dynamic nature of
floating point numbers. Please don't think it's a toy
example. Every day, billions of such numbers play into
artificial intelligence calculations carried out by
specialized processors.
</p>

#INCLUDE para_foot book_top.html aaaarithmetic_toc.html book_special_values.html
