#INCLUDE para_head aaaarithmetic_toc.html aaaarithmetic_toc.html book_nonzero.html


<h1>How floating point arithmetic works</h1>

<p>
This booklet presents binary floating point
number systems and special
values. You will see how arithmetic operations
produce results within the number system.
You will see what happens at the edges, where
floating point departs from everyday mathematics.
You will see how the arithmetic connects to the
rest of the computer system, through the input and output
of decimal values and the reporting of exceptions
like overflow.
</p>

<p>
The beauty and simplicity of floating point arithmetic
are easily lost in a fog of mathematical notation.
This presentation emphasizes ideas over notation.
You have already seen the basic concepts in
<em>scientific notation</em> in school.
The speed of light is 
\(3.00 \times 10^{8} m/sec \) and you have seen the condensed form
<code>3.00E+8</code> on pocket calculators and in spreadsheets.
</p>

<p>
First, this presentation is in binary.
All of the ideas apply
directly to octal (base 8), decimal, and hexadecimal (base 16)
arithmetic.
</p>

<p>
Second, the presentation covers just one
hypothetical data type with 8 significant bits.
The story is the same for standardized formats
like <em>single</em> with 24 significant bits,
<em>double</em> with 53, and
<em>quadruple</em> with 112 significant bits.
Working with 8 bits is easier on the eyes.
</p>

<p>
Third, we omit the details of the storage
format. How the bits are arranged in memory is a vital
part of the design, but the encoding has
nothing to do with arithmetic.
You will find extensive
discussion of number encodings current and past
outside this pamphlet.
</p>

#INCLUDE para_foot aaaarithmetic_toc.html aaaarithmetic_toc.html book_nonzero.html
