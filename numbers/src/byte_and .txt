#INCLUDE para_head byte_sub.html aaanumbers_toc.html byte_div.html


<h1>And</h1>

<p>
The previous pages have looked at the five
most common arithmetic functions. Some specialized
processors support just addition and subtraction.
They leave the others for software routines to
compute.
</p>

<p>
But all procesors support the logical operations:
AND, OR, NOT, and XOR. We'll look at them in
these next pages.
</p>

<p>
Bit-by-bit logical AND is the same as multiplication.
</p>

<pre><big-code>  AND|  0   1
  ---+-------
    0|  0   0
    1|  0   1
</code></pre>

<p>
Logical AND applied to two bytes is applied bit by bit.
</p>

<h2>Example</h2>
<p>
Here is the AND of two bytes. In many cases,
we aren't interested in the numerical values.
Instead, the bytes represent some other form
of data.
</p>

<pre><big-code>
      01100100
  AND 00111101
  ------------
      00100100
</code></pre>

<p>
A numeical application of AND is testing whether a
byte value is even or odd.
</p>

<pre><big-code>
      01100100    decmal 100
  AND 00000001
  ------------
      00000000    1 if odd, 0 if even
</code></pre>

#INCLUDE para_foot byte_sub.html aaanumbers_toc.html byte_div.html
