#INCLUDE para_head aaanumbers_toc.html aaanumbers_toc.html byte_names.html

<link rel="stylesheet" href="../css/odometer-theme-default.css" />
<link rel="stylesheet" href="../css/odometer-theme-minimal.css" />
<style>
.odometer {
  font-size: 100px;
}
</style>

<h1>The byte</h1>

<p>
Play with the slider to explore the range of its values.
</p>

<div class="register">
  <span class="reg-8" id="dig-0"></span>
  <span class="reg-8" id="dig-1"></span>
  <span class="reg-8" id="dig-2"></span>
  <span class="reg-8" id="dig-3"></span>
  <span class="reg-8" id="dig-4"></span>
  <span class="reg-8" id="dig-5"></span>
  <span class="reg-8" id="dig-6"></span>
  <span class="reg-8" id="dig-7"></span>
</div>

<div class="slider-box">
  <input type="range" min="0" max="255" value="0"
    class="slider" id="n-slider">
</div>

<p>
 The byte has the value
 &nbsp;<span class="basic-6" id="n"></span>&nbsp;
 as a number.
</p>

<p>
A byte is literally a string of eight bits.
Each bit has the value <code>0</code> or <code>1</code>.
Pretty simple.
While a byte may be used in many different ways,
it is at its heart a number from \( 0 \) through \( 255 \),
as shown in the box above.
</p>

<p>
The values of the bits in a byte depend on their <em>position</em>,
just the way decimal digits work in everyday numbers
In decimal, we know
the ones place, tens place, hundreds place, and so on. In binary,
we have the ones place, twos place, fours place, and more as
shown here:
</p>

<pre><big-code>  128
    64
      32
        16
          8
            4
              2
                1
</code></pre>

<p>
As an example,
the value of the byte <code>00100101</code>
is \( 32 + 4 + 1 = 37 \).
</p>

<p>
That's the byte. What's amazing is how much can be
accomplished with a datum that takes just \( 256 \)
values. Please read on to learn more.
</p>

<script>
  input_modulus = 256;
</script>
<script src="../js/odo_code.js" ></script>


#INCLUDE para_foot aaanumbers_toc.html aaanumbers_toc.html byte_names.html
