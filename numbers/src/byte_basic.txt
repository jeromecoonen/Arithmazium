#INCLUDE para_head aaanumbers_toc.html aaanumbers_toc.html byte_names.html

<link rel="stylesheet" href="../css/odometer-theme-default.css" />
<link rel="stylesheet" href="../css/odometer-theme-minimal.css" />
<style>
.odometer {
  font-size: 100px;
}
</style>

<h1>The byte</h1>

<p>
The 8-bit byte is the basic unit of computer data.
Play with the slider to explore the range of a byte's values.
If the zeros and ones look too techie,
try the fun look. Zeros and ones, donuts and milk, Morse code
dots and dashes &ndash; they all convey the same message.
</p>

<div class="register">
  <div class="reg-8" id="dig-0"></div>
  <div class="reg-8" id="dig-1"></div>
  <div class="reg-8" id="dig-2"></div>
  <div class="reg-8" id="dig-3"></div>
  <div class="reg-8" id="dig-4"></div>
  <div class="reg-8" id="dig-5"></div>
  <div class="reg-8" id="dig-6"></div>
  <div class="reg-8" id="dig-7"></div>
</div>

<div class="slider-box">
  <input type="range" min="0" max="255" value="0"
    class="slider" id="n-slider">
  <br><br>
  &nbsp;&nbsp;&nbsp;&nbsp;
  <div class="n-buttons">
  <button class="serious-button"
    onclick="more_serious()">Serious</button>
  </div>
  &nbsp;&nbsp;&nbsp;&nbsp;
  <div class="n-buttons">
  <button class="fun-button"
    onclick="more_fun()">&nbsp;&nbsp;Fun&nbsp;&nbsp;</button>
  </div>
  <br><br></div>

<p>
 Your byte has the value
 &nbsp;<span class="basic-6" id="n"></span>&nbsp;
 as a number.
</p>

<p>
A byte is a sequence of eight bits.
Each bit has the value <code>0</code> or <code>1</code>.
While a byte may be used in many different ways,
it is at its heart a number from \( 0 \) through \( 255 \),
as shown in the little box just above.
</p>

<p>
The values of the bits in a byte depend on their <em>position</em>,
just the way decimal digits work in everyday numbers.
Check out these sample values
</p>

<pre><big-code> Binary    Everyday     Donut
  Value      Name     Encoding
 -------    ------    --------
     0       Zero          &#127849;
     1        One          &#129371;
    10        Two         &#129371;&#127849;
    11      Three         &#129371;&#129371;
   100       Four        &#129371;&#127849;&#127849;
   101       Five        &#129371;&#127849;&#129371;
   110        Six        &#129371;&#129371;&#127849;
   111      Seven        &#129371;&#129371;&#129371;
  1000      Eight       &#129371;&#127849;&#127849;&#127849;
  1001       Nine       &#129371;&#127849;&#127849;&#129371;
</code></pre>

<p>
In decimal, we know
the ones place, tens place, hundreds place, and so on. In binary,
we have the ones place, twos place, fours place, and more as
shown here:
</p>

<pre><big-code>  128
    64
      32
        16
          8
            4
              2
                1
</code></pre>

<p>
As an example,
the value of the byte <code>00100101</code>
is \( 32 + 4 + 1 = 37 \).
</p>

<p>
What's amazing is how much can be
accomplished with a little chunk of
data that takes just \( 256 \) different
values. Please read on to learn more.
</p>

<script>
  input_modulus = 256;
</script>
<script src="../js/odo_code.js" ></script>


#INCLUDE para_foot aaanumbers_toc.html aaanumbers_toc.html byte_names.html
