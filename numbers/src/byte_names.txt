#INCLUDE para_head byte_basic.html aaanumbers_toc.html byte_add.html


<h1>Naming numbers</h1>

<p>
We are so familiar with numbers from everyday use
that it's easy to take them for granted.
A mathematical view
is useful for understanding
numbers in computers.
</p>

<p>
When we talk about the numbers zero through twelve,
a mathematician might conjure up an image like this.
</p>

<object type="image/svg+xml" data="img/zero_thru_12.svg">
  ------Image------
</object>

<p>
The concept of <em>number</em> is tied to counting
collections of things. The surrounding containers don't matter,
just the collections.
</p>

<p>
This is the last of the rows above.
</p>

<object type="image/svg+xml" data="img/number_12.svg">
  ------Image------
</object>

<p>
When we match the eggs in a carton
or the donuts in a box one-for-one with the
squares in ths group,
we say they have the same number.
</p>

<p>
The concept of number is about
quantity. It doesn't depend on names for the quantities.
We call this particular number <em>twelve</em>
or sometimes <em>one dozen</em>, but it has other names.
The decimal expression \( 12 \) is just another name.
</p>

<p>
If you're careful with your laundry,
when you look in your sock drawer, your socks
are in <em>pairs</em> matching this collection
that you know as two:
</p>

<object type="image/svg+xml" data="img/number_2.svg">
  ------Image------
</object>

<h2>Names for numbers</h2>

<p>
It is an accident of our biology that we use decimal
numbers to name quantities. Our ancestors counted on
their fingers long before it was discouraged in school.
</p>

<p>
Computers work best with binary numbers.
Electronic circuits can
quickly and reliably detect the presence of
voltage, which they associate with <code>1</code>,
or the absence of voltage, which signifies <code>0</code>.
Just zero and one. Back when computers
were huge and intimidating, people joked about
how stupid they were. No doubt, part of that was due
to this strange number system with just two digits.
</p>

<p>
From an early age,
we hear about the ones place, the tens place, and so
on. The very same concept applies to binary
numbers. It just works a little slower.
In binary, we have the ones place, the twos place, the
fours place, the eights place, the sixteens place, the
thirty-twos place, and so on,
multiplying by \( 2 \) each time.
We're out of breath before
we reach the one-hundred-twenty-eights place.
</p>

<p>
But, wait, we're using our handy decimal numbers to talk
about the binary world. Is that cheating?
No, that's the point of the collections
earlier. The number is what matters, not its name. We often
use decimal language in human communication,
even talking about binary arithmetic. But, when we
talk to a computer in bytes, binary is best.
</p>

<h2>The basic formula</h2>

<p>
Let's look at the number \( 197 \). Somewhere along the way,
we learned to decompose the number as
\[ 197 = 1 \times 100 + 9 \times 10 + 7 \]
If we want to get fancy, we can emphasize the powers of \( 10 \):
\[ 197 = 1 \times 10^{2} + 9 \times 10^{1} + 7 \times 10^{0} \]
It all amounts to \( 197 \).
</p>

<p>
Using the byte odometer on the last page,
we can learn that \( 197 \) has the byte value
<code>11000101</code>.
The breakdown into binary follows the pattern
of our familiar decimal numbers, but with powers of \( 2 \):
\[ 197 = 11000101_{2} = 128 + 64 + 4 + 1 =
 2^{7} + 2^{6} + 2^{2} + 2^{0} \]
 With practice, the powers of \( 2 \) become as familiar
 as \( 1000 \), \( 100 \), and \( 10 \).
</p>

<p>
Returning to the dozen donuts we didn't eat earlier,
we see that our number 12 when stored in a byte
has the form <code>00001100</code> because
\( 12 = 8 + 4 \). It's another name for the same number.
</p>

<p>
Now let's do some byte arithmetic.
</p>


#INCLUDE para_foot byte_basic.html aaanumbers_toc.html byte_add.html
