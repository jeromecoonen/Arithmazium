#
#        A Python version of Kahan's Floating Point Test "Paranoia"
#
#                Jerome Coonen, Nov 2019
#
#        This is a rewrite of the C version by
#
#                Thos Sumner, UCSF, Feb. 1985
#                David Gay, BTL, Jan. 1986
#
#        itself a rewrite from the Pascal version by
#
#                B. A. Wichmann, 18 Jan. 1985
#
#    It is Pythonic where possible, while adhering as closely as
#    possible to its BASIC roots.
#
#    (C) Apr 19 1983 in BASIC version by:
#        Professor William M. Kahan,
#        EECS Dept., Room 441
#        Soda Hall
#        University of California
#        Berkeley, California 94720
#        USA
#
#    converted to Pascal by:
#        B. A. Wichmann
#        National Physical Laboratory
#        Teddington Middx
#        TW11 OLW
#        UK
#
#    converted to C by:
#        David M. Gay             Thos Sumner
#        AT&T Bell Labs           Computer Center, Rm. U-76
#        600 Mountain Avenue      University of California
#        Murray Hill, NJ 07974    San Francisco, CA 94143
#        USA                      USA
#
#    converted to Python by:
#         Jerome Coonen
#         jcoonen@gmail.com
#
#    Comments on the Python conversion:
#    To be completed...
#
#
#    The following is from the introductory commentary to Sumner and Gay's work:
#
#    The conversion to C is made with simultaneous corrections to the
#    Pascal source (reflected in the Pascal source available over netlib).
#    [A couple of bug fixes from dgh = sun!dhough incorporated 31 July 1986.]
#
#    Reports of results on various systems from all the versions
#    of Paranoia are being collected by Richard Karpinski at the
#    same address as Thos Sumner.  This includes sample outputs,
#    bug reports, and criticisms.
#
#    You may copy this program freely if you acknowledge its source.
#    Comments on the Pascal version to NPL, please.
#
#    The C version catches signals from floating-point exceptions.
#    If signal(SIGFPE,...) is unavailable in your environment, you may
#    #define NOSIGNAL to comment out the invocations of signal.
#
#    This source file is too big for some C compilers, but may be split
#    into pieces.  Comments containing "SPLIT" suggest convenient places
#    for this splitting.  At the end of these comments is an "ed script"
#    (for the UNIX(tm) editor ed) that will do this splitting.
#
#    By #defining Single when you compile this source, you may obtain
#    a single-precision C version of Paranoia.
#
#
#    The following is from the introductory commentary from Wichmann's work:
#
#    The BASIC program of Kahan is written in Microsoft BASIC using many
#    facilities which have no exact analogy in Pascal.  The Pascal
#    version below cannot therefore be exactly the same.  Rather than be
#    a minimal transcription of the BASIC program, the Pascal coding
#    follows the conventional style of block-structured languages.  Hence
#    the Pascal version could be useful in producing versions in other
#    structured languages.
#
#    Rather than use identifiers of minimal length (which therefore have
#    little mnemonic significance), the Pascal version uses meaningful
#    identifiers as follows [Note: A few changes have been made for C]:
#
#  BASIC   C               BASIC   C               BASIC   C
#
#   A                       J                       S    StickyBit
#   A1   AInvrse           J0   NoErrors           T
#   B    Radix                    [Failure]         T0   Underflow
#   B1   BInverse           J1   NoErrors           T2   ThirtyTwo
#   B2   RadixD2                  [SeriousDefect]   T5   OneAndHalf
#   B9   BMinusU2           J2   NoErrors           T7   TwentySeven
#   C                             [Defect]          T8   TwoForty
#   C1   CInverse           J3   NoErrors           U    OneUlp
#   D                             [Flaw]            U0   UnderflowThreshold
#   D4   FourD              K    PageNo             U1
#   E0                      L    Milestone          U2
#   E1                      M                       V
#   E2   Exp2               N                       V0
#   E3                      N1                      V8
#   E5   MinSqEr            O    Zero               V9
#   E6   SqEr               O1   One                W
#   E7   MaxSqEr            O2   Two                X
#   E8                      O3   Three              X1
#   E9                      O4   Four               X8
#   F1   MinusOne           O5   Five               X9   Random1
#   F2   Half               O8   Eight              X
#   F3   Third              O9   Nine               Y1
#   sixth                      P    Precision          Y2
#   F9                      Q                       Y9   Random2
#   G1   GMult              Q8                      Z
#   G2   GDiv               Q9                      Z0   PseudoZero
#   G3   GAddSub            R                       Z1
#   H                       R1   RMult              Z2
#   H1   HInverse           R2   RDiv               Z9
#   I                       R3   RAddSub
#   IO   NoTrials           R4   RSqrt
#   I3   IEEE               R9   Random9
#
#   SqRWrng
#
#    All the variables in BASIC are true variables and in consequence,
#    the program is more difficult to follow since the "constants" must
#    be determined (the glossary is very helpful).  The Pascal version
#    uses Real constants, but checks are added to ensure that the values
#    are correctly converted by the compiler.
#
#    The major textual change to the Pascal version apart from the
#    identifiersis that named procedures are used, inserting parameters
#    wherehelpful.  New procedures are also introduced.  The
#    correspondence is as follows:
#
#    BASIC       Pascal
#    lines
#
#      90- 140   pause
#     170- 250   instructions
#     380- 460   heading
#     480- 670   Characteristics
#     690- 870   history
#    2940-2950   Random
#    3710-3740   NewD
#    4040-4080   DoesYequalX
#    4090-4110   PrintIfNPositive
#    4640-4850   TestPartialUnderflow
