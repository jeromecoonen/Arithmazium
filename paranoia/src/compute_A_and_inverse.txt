#INCLUDE para_head the_constants.html aaapara_toc.html compute_C_and_inverse.html

<h1>compute_A_and_inverse()</h1>

<p>
This function returns the values of <code>A</code> and
<code>ONE_OVER_A</code>. Some tests want to to be run
on all powers of \( 2 \), even in octal arithmetic with
3-bit digits and hex with 4-bit digits.
</p>

#CODE 275-compute_A_and_inverse

<p>
The <code>while</code> loop terminates with
<code>x&nbsp;==&nbsp;ONE</code> precisely when
<code>radix</code> is a power of \( 2 \) or
\( 10 \). Note the sum used to capture the value
\( 10 \). This entire program is built
on the handful of integer constants defined at
the outset. See, for example,
<a class="inline" href="small_ints.html">
  Small integers</a>,

</p>

#CODE 277-compute_A_and_inverse2

<p>
Finally, check that for <code>a</code> and
<code>B</code>, that \( x \times 1 / x = 1 \).
</p>

#CODE 279-compute_A_and_inverse3

<h2>Your turn</h2>

<p>
<span class="exer">Exercise:</span> What value <code>a</code>
is computed if the input <code>radix</code> is \( 60 \),
as preferred by the Baylonians? Same question for \( 100 \)?
</p>

<object type="image/svg+xml" data="img/the_constants_b-auto.svg">
  ------Image------
</object>

#INCLUDE para_foot the_constants.html aaapara_toc.html compute_C_and_inverse.html

