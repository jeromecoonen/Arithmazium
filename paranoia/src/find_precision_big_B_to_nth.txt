#INCLUDE para_head precision.html aaapara_toc.html recalc_radix.html

<h1>find_precision_big_B_to_nth()</h1>

<p>
The docstring in the code sets the stage. We're looking for a value like this:
</p>

<object type="image/svg+xml" data="img/precision_c-auto.svg">
  ------Image------
</object>

<p>
This calculation works on most machines, where the precision is
a whole number of digits. On a machine with fractional precision,
such as a hexadecimal machine with 22 significant bits – five hex digits
plus two extra significant bits – the computed precision will be
the <em>floor</em> of the true precision. See the exercise
below.
</p>

#CODE 260-find_precision_big_B_to_nth

<p>
The loop proceeds until the added <code>1.0</code> rounds off
or rounds up into the <code>B</code>'s place of <code>y</code>.
</p>

<object type="image/svg+xml" data="img/precision_d-auto.svg">
  ------Image------
</object>

<div class="wrong">
<h2>What could go wrong?</h2>
<p>
In log arithmetic,
most small whole numbers cannot be represented exactly.
What seem like obvious
computations, such as adding <code>1.0</code> to small
whole numbers, are inexact. That's why we skip this function
altogether in log arithmetic.
</p>
</div>

#CODE 262-find_precision_big_B_nth2

<h2>Your turn</h2>

<p>
<span class="exer">Exercise:</span> The hexadecimal diagram below
shows the loop in progress. There are five and a fraction digits, that is,
the low-order hex digit has one, two, or three low-order bits always zero
(and not represented in the storage format). Work out what might happen to
the <code>1</code> added to a hex digit that has a hard-wired <code>0</code>
there. What is the computed precision?
</p>

<object type="image/svg+xml" data="img/precision_e-auto.svg">
  ------Image------
</object>

#INCLUDE para_foot precision.html aaapara_toc.html recalc_radix.html
