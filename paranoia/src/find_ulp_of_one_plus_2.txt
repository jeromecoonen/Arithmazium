#INCLUDE para_head find_ulp_of_one_plus.html aaapara_toc.html find_ulp_of_one_minus.html

<h1>find_ulp_of_one_plus()  &ndash;  the iteration</h1>

<p>
So far, we have computed a value <code>x</code> with one
or more ulps of <code>1.0</code>. Next, we exploit a powerful
numerical idiom of Paranoia:
</p>

<p class="quote">
<em>
When searching for the smallest value with a given property,
start with a handy value
at least as big and iterate downward.
</em>
</p>

<p>
The iteration exhibits another useful technique:
the creation of nonzero low-order
digits to encourage an upward round, if there's nearly a half-way case.
The binary diagram below shows how <code>u</code> is halved, but with
some added nonzero low-order bits. Since <code>u</code> is some ulps of
\(1.0\), <code>u * u</code> is some ulps of <code>u</code>.
The factor <code>THIRTY_TWO</code> shifts those bits well back into
<code>u</code> in radix 2, 8, or 16. The diagram continues the binary tale.
</p>

#SVG ulp_one_plus_b-auto

</p>
In decimal, the factor <code>THIRTY_TWO</code> ensures some
nonzero low-order digits in <code>x</code>.
</p>

<p>
The expression <code>x + ONE</code> rounds to <code>1.0</code>
plus some ulps of one.
Subtracting <code>ONE</code> is exact, leaving just the ulps.
Successively halving the value walks it down to a single ulp.
</p>

#CODE 267-find_ulp_of_one_plus2

<h2>Your turn</h2>

<p>
<span class="exer">Exercise:</span> Complete the binary case
started in the diagram above to see that it results in
one ulp of <code>1.0</code>.
</p>

<p>
<span class="exer">Exercise:</span> The decimal diagram below
starts the iteration in 6-digit rounded decimal arithmetic.
</p>

#SVG ulp_one_plus_e-auto

<p>
Continue the loop to find one ulp of <code>1.0</code>.
</p>

<p>
<span class="exer">Exercise:</span> Complete the
computation in 6-digit chopped octal arithmetic.
</p>

#SVG ulp_one_plus_f-auto

#INCLUDE para_foot find_ulp_of_one_plus.html aaapara_toc.html find_ulp_of_one_minus.html
