#INCLUDE para_head para_versions.html aaapara_toc.html pocket_guide.html

<h1>Semiliterate Programming</h1>
<p>
<span class="p">ParaPy</span> is an example of Semiliterate Programming,
to borrow from the powerful
<a class="inline" href="http://www.literateprogramming.com/"
  target="_blank">
Literate Programing</a>
paradigm of Donald Knuth.
In both cases, the goal is to present the code in the best form for a
human reader,
not a compiler. Knuth's methodology supports a top-down creation of a program,
the way we often think of programming, with the benefit of handsome
presentation of the code using Knuth's
 <a class="inline" href="https://en.wikipedia.org/wiki/TeX"
  target="_blank">TeX</a>.
 </p>

 <p>
With <span class="p">ParaPy</span>, we start with a few thousand
lines of Python that have evolved from the <span class="p">ParaC</span>
translation of <span class="p">ParaBas</span>.
This is programming from the inside out.
Our presentation is a series of web pages documenting code snippets,
not a formatted document suitable for publication.
It shares the granularity of the
literate programming style.
</p>

<p>
The semiliterate approach differs in the treatment of the pure Python
code. <span class="p">ParaPy</span> is offered
<a class="inline" href="paranoia_py.html" target="_blank">here</a>
to be copied and pasted locally and run as is.
It has sufficient comments to stand on its own, but not to explain
all the inner workings. By contrast, the code output of the
literate programming <code>tangle</code> tool is not intended for
human consumption and may even be obfuscated to remove the temptation
to modify that version instead the literate Web form.
By design, Python discourages such obfuscation. For example, Python enforces
indentation to reveal block structure.
</p>

<p>
The semiliterate approach of
<span class="p">ParaPy</span> is expedient.
The source
code presented in the site is what's carved up into the
snippets presented in the discussion. All the pieces
remaain up to date.
While the semiliterate approach lacks the handy indexing
and cross-referencing tools of literate programming,
there is always the full source <code>paranoia.py</code>
as the final arbiter.
When in doubt, think Star Wars: <em>Use the source, Luke!</em>
</p>

<h2>Digit diagrams</h2>
<p>
Paranoia employs devious sequences of algebraic
operations to tease out isolated digits of numbers.
Most often, the formulas work whether the radix
is 2, 8, 10, or 16. To help visualize the flow, we will
use <em>digit diagrams</em>. This is an example showing
three constants (hence the caps) in <span class="p">ParaPy</span>:
</p>

<object type="image/svg+xml"
  data="img/semilit_samp_a-auto.svg">
  Image of 1.0, the number next larger, and an ulp.
</object>

<p>
Digit diagrams have no connection to the internal representation of
nummbers. You, good reader, are asked to supply the scale factor –
the exponent – from the context. Almost all current arithmetic
uses a normalized representation, which allows the leading
<code>1</code> bit to be <em>implicit</em>. In the digit diagrams,
we'll leave the radix point aligned across multiple values, to
help visualize the calculation.
</p>

<p>
The key is to honor the number of significant digits
(the <em>precision</em>) which Paranoia
determines early on. That's what the vertical guidelines indicate
in the diagrams.
Digits may lie outside out the guidelines, but there may never
by any more digits than would fit between them.
</p>

<p>
Consider what happens when subtracting a <em>unit in the lsat place</em>
of <code>1.0</code> in any radix:
</p>

<object type="image/svg+xml"
  data="img/semilit_samp_b-auto.svg">
  Values just less than 1.0, in radix 2, 10, 8, 16.
</object>

<p>
The lowest-order significant digit is now one place to the right,
because the one's place is now zero.
</p>

<p>
We'll see many of these diagrams.
</p>

<h2>Tick diagrams</h2>
<p>
Sometimes, it's easier to visualize values on a number line.
In floating point arithmetic systems, the powers of the radix
<code>B</code> divide the number system into
<em>B-ade</em>, each enclosing the same number of representable
values.
We all know decimal <em>decades</em>,
but we will encounter binary <em>binades</em>
frequently. Occasionally, we'll see
an <em>ocatade</em> or <em>hexade</em>.
</p>

<p>
Here is a span of a decimal system, with the tick marks greatly
magnified so we can see them. The value \(4/3\) is not representable
exactly, so it lies between representable numbers. On the other
hand, \(3/2\) is simply <code>1.5</code>, regardless how it's encoded.
Note how the relative spacing changes by a factor of \(10\) across
decades. The graph is similar in base 8 and base 16.
</p>

<object type="image/svg+xml"
  data="img/semilit_4_3_d-auto.svg">
  Decimal number line.
</object>

<p>
The binary number line is easier to visualize because the relative spacing
changes by just a facctor of \(2\) across each binade (sounds like
<em>limeade</em>). It's this factor that makes binary floating point
best for most numerical computation.
Once again, here are \(4/3\) and \(3/2\).
</p>

<object type="image/svg+xml"
  data="img/semilit_4_3_b-auto.svg">
  Binary number line.
</object>



#INCLUDE para_foot para_versions.html aaapara_toc.html pocket_guide.html
